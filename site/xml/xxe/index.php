<?php
$xml1 = <<< 'EOT'
<!DOCTYPE root [
  <!ENTITY foo SYSTEM "file.txt">
]>
<xml>&foo;</xml>
EOT;

$xml2 = <<< 'EOT'
<!DOCTYPE root [
  <!ENTITY foo SYSTEM "config/config.ini">
]>
<xml>&foo;</xml>
EOT;

$xml3 = <<< 'EOT'
<!DOCTYPE root [
  <!ENTITY foo SYSTEM "index.php">
]>
<xml>&foo;</xml>
EOT;

$xml4 = <<< 'EOT'
<!DOCTYPE root [
  <!ENTITY foo SYSTEM "php://filter/read=convert.base64-encode/resource=index.php">
]>
<xml>&foo;</xml>
EOT;

$xml5 = <<< 'EOT'
<xml>&quot; &amp; &apos; &gt; &lt;</xml>
EOT;

function removeWhitespace(string $input): string
{
	return preg_replace("/[\r\n]+|^\s+/m", '', trim($input));
}

if (isset($_POST['xml']) && is_string($_POST['xml'])) {
	$originalInput = $_POST['xml'];
}
$substitute = $_POST['substitute'] ?? '' === 'yes';
?>
<!DOCTYPE html>
<html lang="en">
<head>
<title>XML External Entity Injection (XXE) demo</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
body { max-width: 820px; margin: 1em auto; padding: 1em; line-height: 1.5; font-family: sans-serif; }
pre { white-space: pre-wrap; word-wrap: break-word; word-break: break-word; background-color: #EEE; padding: 1em; }
textarea { width: 100%; }
.copy { cursor: pointer; }
.error { color: #F00; background-color: #FEE; padding: 1em; }
.error h3, .error ul { margin: 0 auto; }
@media (prefers-color-scheme: dark) {
	body { color: #EEE; background-color: #333; }
	pre { background-color: #444; }
	textarea { color: #EEE; background-color: #3A3A3A; }
	a { color: #99D; }
	.error { color: #EEE; background-color: #A55; }
}
</style>
<script>
document.addEventListener('DOMContentLoaded', function () {
	document.querySelectorAll('.copy').forEach(function (element) {
		element.addEventListener('click', function () {
			document.getElementById('input').value = this.innerText;
		});
	})
});
</script>
</head>
<body>
<h1>XXE (XML External Entity Injection) demo</h1>
<strong>Try parsing one of the following XMLs</strong>, click to copy the code to the input area below (the demo won't parse any other XML <em>because security</em>)
<p><em>To get a contents of <code>file.txt</code>:</em></p><pre class="copy"><?= htmlspecialchars($xml1); ?></pre>
<p><em>To get a contents of <code>config/config.ini</code>:</em></p><pre class="copy"><?= htmlspecialchars($xml2); ?></pre>
<p><em>To get a contents of this PHP file (won't work because most PHP can't be parsed as XML):</em></p><pre class="copy"><?= htmlspecialchars($xml3); ?></pre>
<p><em>To get a contents of this PHP file as a Base64-encoded string (this time for real):</em></p><pre class="copy"><?= htmlspecialchars($xml4); ?></pre>
<p><em>The predefined entities will always work regardless if you want to substitute external entities or not:</em></p><pre class="copy"><?= htmlspecialchars($xml5); ?></pre>

<h2>Parse XML</h2>
<form action="#result" method="post">
	<p>
		<label for="input">Enter XML or click any XML above:</label>
		<textarea id="input" wrap="off" rows="10" name="xml"><?= htmlspecialchars($originalInput ?? ''); ?></textarea>
	</p>
	<p>
		<label><input type="checkbox" name="substitute" value="yes"<?= $substitute ? ' checked' : '';?>> Substitute entities?</label>
		<input type="submit" value="Parse">
	</p>
</form>

<?php
if ($originalInput ?? false) {
	$input = removeWhitespace($originalInput);
	foreach ([$xml1, $xml2, $xml3, $xml4, $xml5] as $xml) {
		if ($input === removeWhitespace($xml)) {
			$allowed = true;
		}
	}
	echo '<h2 id="result">The result</h2>';
	if ($allowed ?? false) {
		libxml_use_internal_errors(true);
		// LIBXML_NOENT is not a good idea but is needed to make the XXE work on newer PHP versions; remember this is a demo, not a pruduction app
		$options = $substitute ? LIBXML_NOENT : 0;
		$element = simplexml_load_string($_POST['xml'], options: $options);
		if ($element === false) {
			echo '<h3>Something went wrong</h3>';
			$errors = libxml_get_errors();
			if ($errors) {
				echo '<div class="error">';
				echo '<h3>XML parsing errors:</h3>';
				echo '<ul>';
				foreach ($errors as $error) {
					echo "<li>{$error->message} on line {$error->line}</li>";
				}
				echo '</ul>';
				echo '</div>';
			}
		} else {
			echo '<p><strong>The element</strong>:</p><pre>' . (htmlspecialchars((string)$element) ?: '<em>none</em>') . '</pre>';
			echo '<p><strong>The eventual XML as seen by the parser</strong>:</p><pre>' . htmlspecialchars($element->asXML()) . '</pre>';
		}
	} else {
		echo 'The submitted XML is not allowed, try again';
	}
	echo '<p><a href="">Reset</a></p>';
}
?>

<p>
	Starting with PHP 8.0 (this demo is running on <?= htmlspecialchars(phpversion()); ?>), the minimum <a href="https://www.php.net/manual/en/migration80.other-changes.php#migration80.other-changes.extensions.libxml">required libxml version is 2.9.0</a> (this demo uses <?= htmlspecialchars(LIBXML_DOTTED_VERSION); ?>)
	which means that external entity loading is now guaranteed to be disabled by default, and no extra steps need to be taken to protect against XXE attacks. This is the same behavior you get
	when you leave the <em>Substitute entities</em> checkbox unchecked.
</p>
<p>
	Before PHP 8.0, you had to call <a href="https://www.php.net/manual/en/function.libxml-disable-entity-loader"><code>libxml_disable_entity_loader()</code></a> to make sure the loader is disabled.
	When checked, the checkbox above simulates the older defaults where entities were substituted, demostrating the XXE (XML External Entity Injection) attack. The simulation is done by passing <a href="https://www.php.net/libxml.constants#constant.libxml-noent"><code>LIBXML_NOENT</code></a> option to the XML parser, <em>don't try this at home!</em>
</p>

<hr>
<em>By Michal Špaček <a href="https://www.michalspaacek.com/">michalspacek.com</a>, <a href="https://twitter.com/spazef0rze">@spazef0rze</a>, <a href="https://infosec.exchange/@spazef0rze">Mastodon</a>, <a href="https://github.com/spaze/exploited.cz/tree/main/site/xml/xxe">source</a></em>
</body>
</html>
